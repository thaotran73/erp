{
  "version": 3,
  "file": "ngx-select-ex.umd.min.js",
  "sources": [
    "ng://ngx-select-ex/out/ngx-select/ngx-select.classes.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-templates.directive.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-select.component.ts"
  ],
  "sourcesContent": [
    "import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\n\nconst escapeString = escapeStringNs;\n\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'option';\n\n    constructor(public value: number | string,\n                public text: string,\n                public disabled: boolean,\n                public data: any,\n                private _parent: NgxSelectOptGroup = null) {\n    }\n\n    public get parent(): NgxSelectOptGroup {\n        return this._parent;\n    }\n\n    private cacheHighlightText: string;\n    private cacheRenderedText: SafeHtml = null;\n\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\n            this.cacheHighlightText = highlightText;\n            if (this.cacheHighlightText) {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\n                ));\n            } else {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\n            }\n        }\n        return this.cacheRenderedText;\n    }\n}\n\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'optgroup';\n\n    public optionsFiltered: NgxSelectOption[];\n\n    constructor(public label: string,\n                public options: NgxSelectOption[] = []) {\n        this.filter(() => true);\n    }\n\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\n    }\n}\n\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\n",
    "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({selector: '[ngx-select-option]'})\nexport class NgxSelectOptionDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-selected]'})\nexport class NgxSelectOptionSelectedDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-not-found]'})\nexport class NgxSelectOptionNotFoundDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n",
    "import {\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\n    TemplateRef, Optional, Inject, InjectionToken\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/combineLatest';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/toArray';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport * as lodashNs from 'lodash';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\n\nconst _ = lodashNs;\nconst escapeString = escapeStringNs;\n\nexport const NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\n\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\n    clickedSelectComponent?: NgxSelectComponent;\n}\n\nenum ENavigation {\n    first, previous, next, last,\n    firstSelected, firstIfOptionActiveInvisible\n}\n\nfunction propertyExists(obj: Object, propertyName: string) {\n    return propertyName in obj;\n}\n\n@Component({\n    selector: 'ngx-select',\n    template: `<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\n     [ngClass]=\"setFormControlSize({\n        'ngx-select_multiple form-control': multiple === true,\n        'open show': optionsOpened && optionsFiltered.length\n     }, multiple === true)\"\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\"\n     (keyup)=\"mainKeyUp($event)\">\n    <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\n\n    <!-- single selected item -->\n    <div class=\"ngx-select__selected\"\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n        <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\n             (click)=\"optionsOpen()\">\n\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\n                <span [innerHtml]=\"placeholder\"></span>\n            </span>\n            <span *ngIf=\"optionsSelected.length\"\n                  class=\"ngx-select__selected-single pull-left float-left\"\n                  [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                          text: sanitize(optionsSelected[0].text)}\">\n                </ng-container>\n            </span>\n            <span class=\"ngx-select__toggle-buttons\">\n                <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\n                   [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(optionsSelected[0], $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n                <i class=\"dropdown-toggle\"></i>\n                <i class=\"ngx-select__toggle-caret caret\"></i>\n            </span>\n        </div>\n    </div>\n\n    <!-- multiple selected items -->\n    <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\">\n        <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\n            <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\"\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-xs\">\n\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                </ng-container>\n\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(option, $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n            </span>\n        </span>\n    </div>\n\n    <!-- live search an item from the list -->\n    <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\n           *ngIf=\"checkInputVisibility()\"\n           [tabindex]=\"multiple === false? -1: 0\"\n           (keydown)=\"inputKeyDown($event)\"\n           (keyup)=\"inputKeyUp(input.value)\"\n           (input)=\"doInputText(input.value)\"\n           [disabled]=\"disabled\"\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\n           (click)=\"inputClick(input.value)\"\n           autocomplete=\"off\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           role=\"combobox\">\n\n    <!-- options template -->\n    <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\n        [class.show]=\"optionsOpened\">\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n            <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n               [ngClass]=\"{\n                    'ngx-select__item_active active': isOptionActive(option, choiceItem),\n                    'ngx-select__item_disabled disabled': option.disabled\n               }\"\n               (mouseenter)=\"optionActivate({\n                    activeOption: option,\n                    filteredOptionList: optionsFiltered,\n                    index: optionsFiltered.indexOf(option)\n               })\"\n               (click)=\"optionSelect(option, $event)\">\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: highlightOption(option),\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\n            </a>\n        </li>\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"></ng-container>\n        </li>\n    </ul>\n\n    <!--Default templates-->\n    <ng-template #defaultTemplateOption let-text=\"text\">\n        <span [innerHtml]=\"text\"></span>\n    </ng-template>\n\n    <ng-template #defaultTemplateOptionNotFound>\n        {{noResultsFound}}\n    </ng-template>\n\n</div>`,\n    styles: [`.ngx-select{ }\n  .ngx-select_multiple{\n    height:auto;\n    padding:3px 3px 0 3px; }\n  .ngx-select_multiple .ngx-select__search{\n    background-color:transparent !important;\n    border:none;\n    outline:none;\n    -webkit-box-shadow:none;\n            box-shadow:none;\n    height:1.6666em;\n    padding:0;\n    margin-bottom:3px; }\n  .ngx-select__disabled{\n    background-color:#eceeef;\n    border-radius:4px;\n    position:absolute;\n    width:100%;\n    height:100%;\n    z-index:5;\n    opacity:0.6;\n    top:0;\n    left:0;\n    cursor:not-allowed; }\n  .ngx-select__toggle{\n    outline:0;\n    position:relative;\n    text-align:left !important;\n    color:#333;\n    background-color:#fff;\n    border-color:#ccc;\n    display:-webkit-inline-box;\n    display:-ms-inline-flexbox;\n    display:inline-flex;\n    -webkit-box-align:stretch;\n        -ms-flex-align:stretch;\n            align-items:stretch;\n    -webkit-box-pack:justify;\n        -ms-flex-pack:justify;\n            justify-content:space-between; }\n    .ngx-select__toggle:hover{\n      color:#333;\n      background-color:#e6e6e6;\n      border-color:#adadad; }\n  .ngx-select__toggle-buttons{\n    -ms-flex-negative:0;\n        flex-shrink:0;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center; }\n  .ngx-select__toggle-caret{\n    position:absolute;\n    height:10px;\n    top:50%;\n    right:10px;\n    margin-top:-2px; }\n  .ngx-select__placeholder{\n    float:left; }\n  .ngx-select__clear{\n    margin-right:10px;\n    padding:0;\n    border:none; }\n  .ngx-select_multiple .ngx-select__clear{\n    line-height:initial;\n    margin-left:5px;\n    margin-right:0;\n    color:#000;\n    opacity:.5; }\n  .ngx-select__clear-icon{\n    display:inline-block;\n    font-size:inherit;\n    cursor:pointer;\n    position:relative;\n    width:1em;\n    height:.75em;\n    padding:0; }\n    .ngx-select__clear-icon:before, .ngx-select__clear-icon:after{\n      content:'';\n      position:absolute;\n      border-top:3px solid;\n      width:100%;\n      top:50%;\n      left:0;\n      margin-top:-1px; }\n    .ngx-select__clear-icon:before{\n      -webkit-transform:rotate(45deg);\n              transform:rotate(45deg); }\n    .ngx-select__clear-icon:after{\n      -webkit-transform:rotate(-45deg);\n              transform:rotate(-45deg); }\n  .ngx-select__choices{\n    width:100%;\n    height:auto;\n    max-height:200px;\n    overflow-x:hidden;\n    margin-top:0;\n    position:absolute; }\n  .ngx-select_multiple .ngx-select__choices{\n    margin-top:1px; }\n  .ngx-select__item{\n    display:block;\n    padding:3px 20px;\n    clear:both;\n    font-weight:400;\n    line-height:1.42857143;\n    white-space:nowrap;\n    cursor:pointer;\n    text-decoration:none; }\n  .ngx-select__item_disabled, .ngx-select__item_no-found{\n    cursor:default; }\n  .ngx-select__item_active{\n    color:#fff;\n    outline:0;\n    background-color:#428bca; }\n  .ngx-select__selected-single, .ngx-select__selected-plural{\n    display:-webkit-inline-box;\n    display:-ms-inline-flexbox;\n    display:inline-flex;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center;\n    overflow:hidden; }\n    .ngx-select__selected-single span, .ngx-select__selected-plural span{\n      overflow:hidden;\n      text-overflow:ellipsis; }\n  .ngx-select__selected-plural{\n    outline:0;\n    margin:0 3px 3px 0; }\n.input-group > .dropdown{\n  position:static; }\n`],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxSelectComponent),\n            multi: true\n        }\n    ]\n})\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\n    @Input() public items: any[];\n    @Input() public optionValueField = 'id';\n    @Input() public optionTextField = 'text';\n    @Input() public optGroupLabelField = 'label';\n    @Input() public optGroupOptionsField = 'options';\n    @Input() public multiple = false;\n    @Input() public allowClear = false;\n    @Input() public placeholder = '';\n    @Input() public noAutoComplete = false;\n    @Input() public disabled = false;\n    @Input() public defaultValue: any[] = [];\n    @Input() public autoSelectSingleOption = false;\n    @Input() public autoClearSearch = false;\n    @Input() public noResultsFound = 'No results found';\n    @Input() public size: 'small' | 'default' | 'large' = 'default';\n    @Input() public searchCallback: (search: string, item: INgxSelectOption) => boolean;\n    public keyCodeToRemoveSelected = 'Delete';\n    public keyCodeToOptionsOpen = 'Enter';\n    public keyCodeToOptionsClose = 'Escape';\n    public keyCodeToOptionsSelect = 'Enter';\n    public keyCodeToNavigateFirst = 'ArrowLeft';\n    public keyCodeToNavigatePrevious = 'ArrowUp';\n    public keyCodeToNavigateNext = 'ArrowDown';\n    public keyCodeToNavigateLast = 'ArrowRight';\n\n    @Output() public typed = new EventEmitter<string>();\n    @Output() public focus = new EventEmitter<void>();\n    @Output() public blur = new EventEmitter<void>();\n    @Output() public open = new EventEmitter<void>();\n    @Output() public close = new EventEmitter<void>();\n    @Output() public select = new EventEmitter<any>();\n    @Output() public remove = new EventEmitter<any>();\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\n    @Output() public selectionChanges = new EventEmitter<INgxSelectOption[]>();\n\n    @ViewChild('main') protected mainElRef: ElementRef;\n    @ViewChild('input') protected inputElRef: ElementRef;\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\n\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\n\n    public optionsOpened = false;\n    public optionsFiltered: TSelectOption[];\n\n    private optionActive: NgxSelectOption;\n    private itemsDiffer: IterableDiffer<any>;\n    private defaultValueDiffer: IterableDiffer<any[]>;\n    private actualValue: any[] = [];\n\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\n    private subjSearchText = new BehaviorSubject<string>('');\n\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\n    private subjRegisterOnChange = new Subject();\n\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\n    private cacheElementOffsetTop: number;\n\n    private _focusToInput = false;\n    public isFocused = false;\n\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef,\n                @Inject(NGX_SELECT_OPTIONS) @Optional() defaultOptions: INgxSelectOptions) {\n        Object.assign(this, defaultOptions);\n\n        // differs\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\n\n        // observers\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\n        this.subjOptionsSelected.subscribe((options: NgxSelectOption[]) => this.selectionChanges.emit(options));\n        let cacheExternalValue: any[];\n        const subjActualValue = this.subjExternalValue\n            .map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v))\n            .merge(this.subjOptionsSelected.map((options: NgxSelectOption[]) =>\n                options.map((o: NgxSelectOption) => o.value)\n            ))\n            .combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\n                return newVal.length ? newVal : dVal;\n            })\n            .distinctUntilChanged((x, y) => _.isEqual(x, y))\n            .share();\n\n        subjActualValue\n            .combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\n            .subscribe((actualValue: any[]) => {\n                this.actualValue = actualValue;\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\n                    cacheExternalValue = actualValue;\n                    if (this.multiple) {\n                        this.onChange(actualValue);\n                    } else {\n                        this.onChange(actualValue.length ? actualValue[0] : null);\n                    }\n                }\n            });\n\n        this.subjOptions\n            .flatMap((options: TSelectOption[]) => Observable\n                .from(options)\n                .flatMap((option: TSelectOption) => option instanceof NgxSelectOption\n                    ? Observable.of(option)\n                    : (option instanceof NgxSelectOptGroup ? Observable.from(option.options) : Observable.empty())\n                )\n                .toArray()\n            )\n            .combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\n                Observable.from(optionsFlat)\n                    .filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1)\n                    .toArray()\n                    .filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\n                    .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\n            })\n            .subscribe();\n\n        this.subjOptions\n            .combineLatest(this.subjOptionsSelected, this.subjSearchText,\n                (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\n                    this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\n                    this.cacheOptionsFilteredFlat = null;\n                    this.navigateOption(ENavigation.firstIfOptionActiveInvisible);\n                    return selectedOptions;\n                }\n            )\n            .flatMap((selectedOptions: NgxSelectOption[]) => {\n                return this.optionsFilteredFlat().filter((flatOptions: NgxSelectOption[]) =>\n                    this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length\n                );\n            })\n            .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\n    }\n\n    public setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\n        const formControlExtraClasses = useFormControl ? {\n            'form-control-sm input-sm': this.size === 'small',\n            'form-control-lg input-lg': this.size === 'large'\n        } : {};\n        return Object.assign(formControlExtraClasses, otherClassNames);\n    }\n\n    public setBtnSize() {\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\n    }\n\n    public get optionsSelected(): NgxSelectOption[] {\n        return this.subjOptionsSelected.value;\n    }\n\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\n        event.clickedSelectComponent = this;\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.focus.emit();\n        }\n    }\n\n    @HostListener('document:focusin', ['$event'])\n    @HostListener('document:click', ['$event'])\n    public documentClick(event: INgxSelectComponentMouseEvent) {\n        if (event.clickedSelectComponent !== this) {\n            if (this.optionsOpened) {\n                this.optionsClose();\n                this.cd.detectChanges(); // fix error because of delay between different events\n            }\n            if (this.isFocused) {\n                this.isFocused = false;\n                this.blur.emit();\n            }\n        }\n    }\n\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\n        if (this.cacheOptionsFilteredFlat) {\n            return Observable.of(this.cacheOptionsFilteredFlat);\n        }\n\n        return Observable.from(this.optionsFiltered)\n            .flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\n                option instanceof NgxSelectOption ? Observable.of(option) :\n                    (option instanceof NgxSelectOptGroup ? Observable.from(option.optionsFiltered) : Observable.empty())\n            )\n            .filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled)\n            .toArray()\n            .do((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat);\n    }\n\n    private navigateOption(navigation: ENavigation) {\n        this.optionsFilteredFlat()\n            .map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\n                let newActiveIdx;\n                switch (navigation) {\n                    case ENavigation.first:\n                        navigated.index = 0;\n                        break;\n                    case ENavigation.previous:\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\n                        break;\n                    case ENavigation.next:\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\n                        break;\n                    case ENavigation.last:\n                        navigated.index = options.length - 1;\n                        break;\n                    case ENavigation.firstSelected:\n                        if (this.subjOptionsSelected.value.length) {\n                            navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);\n                        }\n                        break;\n                    case ENavigation.firstIfOptionActiveInvisible:\n                        const idxOfOptionActive = options.indexOf(this.optionActive);\n                        navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;\n                        break;\n                }\n                navigated.activeOption = options[navigated.index];\n                return navigated;\n            })\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\n    }\n\n    public ngDoCheck(): void {\n        if (this.itemsDiffer.diff(this.items)) {\n            this.subjOptions.next(this.buildOptions(this.items));\n        }\n\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\n        if (this.defaultValueDiffer.diff(defVal)) {\n            this.subjDefaultValue.next(defVal);\n        }\n    }\n\n    public ngAfterContentChecked(): void {\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\n            this.inputElRef.nativeElement !== document.activeElement) {\n            this._focusToInput = false;\n            this.inputElRef.nativeElement.focus();\n        }\n    }\n\n    public canClearNotMultiple(): boolean {\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\n    }\n\n    public focusToInput(): void {\n        this._focusToInput = true;\n    }\n\n    public inputKeyDown(event: KeyboardEvent) {\n        const keysForOpenedState = [\n            this.keyCodeToOptionsSelect,\n            this.keyCodeToNavigateFirst,\n            this.keyCodeToNavigatePrevious,\n            this.keyCodeToNavigateNext,\n            this.keyCodeToNavigateLast,\n        ];\n        const keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\n\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsSelect:\n                    this.optionSelect(this.optionActive);\n                    this.navigateOption(ENavigation.next);\n                    break;\n                case this.keyCodeToNavigateFirst:\n                    this.navigateOption(ENavigation.first);\n                    break;\n                case this.keyCodeToNavigatePrevious:\n                    this.navigateOption(ENavigation.previous);\n                    break;\n                case this.keyCodeToNavigateLast:\n                    this.navigateOption(ENavigation.last);\n                    break;\n                case this.keyCodeToNavigateNext:\n                    this.navigateOption(ENavigation.next);\n                    break;\n            }\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsOpen:\n                    this.optionsOpen();\n                    break;\n                case this.keyCodeToRemoveSelected:\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\n                    break;\n            }\n        }\n    }\n\n    public mainKeyUp(event: KeyboardEvent): void {\n        if (event.code === this.keyCodeToOptionsClose) {\n            this.optionsClose(/*true*/);\n        }\n    }\n\n    public trackByOption(index: number, option: TSelectOption) {\n        return option instanceof NgxSelectOption ? option.value :\n            (option instanceof NgxSelectOptGroup ? option.label : option);\n    }\n\n    public checkInputVisibility(): boolean {\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\n    }\n\n    /** @internal */\n    public inputKeyUp(value: string = '') {\n        if (!this.optionsOpened && value) {\n            this.optionsOpen(value);\n        }\n    }\n\n    /** @internal */\n    public doInputText(value: string) {\n        if (this.optionsOpened) {\n            this.typed.emit(value);\n        }\n    }\n\n    /** @internal */\n    public inputClick(value: string = '') {\n        if (!this.optionsOpened) {\n            this.optionsOpen(value);\n        }\n    }\n\n    /** @internal */\n    public sanitize(html: string): SafeHtml {\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\n    }\n\n    /** @internal */\n    public highlightOption(option: NgxSelectOption): SafeHtml {\n        if (this.inputElRef) {\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\n        }\n        return option.renderText(this.sanitizer, '');\n    }\n\n    /** @internal */\n    public optionSelect(option: NgxSelectOption, event: Event = null): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        if (option && !option.disabled) {\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\n            this.select.emit(option.value);\n            this.optionsClose(/*true*/);\n            this.onTouched();\n        }\n    }\n\n    /** @internal */\n    public optionRemove(option: NgxSelectOption, event: Event): void {\n        if (!this.disabled && option) {\n            event.stopPropagation();\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\n            this.remove.emit(option.value);\n        }\n    }\n\n    /** @internal */\n    public isOptionActive(option: NgxSelectOption, element: HTMLElement) {\n        if (this.optionActive === option) {\n            this.ensureVisibleElement(element);\n            return true;\n        }\n        return false;\n    }\n\n    /** @internal */\n    public optionActivate(navigated: INgxOptionNavigated): void {\n        if ((this.optionActive !== navigated.activeOption) &&\n            (!navigated.activeOption || !navigated.activeOption.disabled)) {\n            this.optionActive = navigated.activeOption;\n            this.navigated.emit(navigated);\n        }\n    }\n\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\n        const regExp = new RegExp(escapeString(search), 'i'),\n            filterOption = (option: NgxSelectOption) => {\n                if (this.searchCallback) {\n                    return this.searchCallback(search, option);\n                }\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\n            };\n\n        return options.filter((option: TSelectOption) => {\n            if (option instanceof NgxSelectOption) {\n                return filterOption(<NgxSelectOption>option);\n            } else if (option instanceof NgxSelectOptGroup) {\n                const subOp = <NgxSelectOptGroup>option;\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\n                return subOp.optionsFiltered.length;\n            }\n        });\n    }\n\n    private ensureVisibleElement(element: HTMLElement) {\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\n            this.cacheElementOffsetTop = element.offsetTop;\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\n            if (this.cacheElementOffsetTop < container.scrollTop) {\n                container.scrollTop = this.cacheElementOffsetTop;\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\n            }\n        }\n    }\n\n    public optionsOpen(search: string = '') {\n        if (!this.disabled) {\n            this.optionsOpened = true;\n            this.subjSearchText.next(search);\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\n                this.navigateOption(ENavigation.firstSelected);\n            } else {\n                this.navigateOption(ENavigation.first);\n            }\n            this.focusToInput();\n            this.open.emit();\n        }\n    }\n\n    public optionsClose(/*focusToHost: boolean = false*/) {\n        this.optionsOpened = false;\n        // if (focusToHost) {\n        //     const x = window.scrollX, y = window.scrollY;\n        //     this.mainElRef.nativeElement.focus();\n        //     window.scrollTo(x, y);\n        // }\n        this.close.emit();\n\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\n            this.inputElRef.nativeElement.value = null;\n        }\n    }\n\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\n        if (Array.isArray(data)) {\n            let option: NgxSelectOption;\n            data.forEach((item: any) => {\n                const isOptGroup = typeof item === 'object' && item !== null &&\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\n                    Array.isArray(item[this.optGroupOptionsField]);\n                if (isOptGroup) {\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\n                        if (option = this.buildOption(subOption, optGroup)) {\n                            optGroup.options.push(option);\n                        }\n                    });\n                    result.push(optGroup);\n                } else if (option = this.buildOption(item, null)) {\n                    result.push(option);\n                }\n            });\n        }\n        return result;\n    }\n\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\n        let value, text, disabled;\n        if (typeof data === 'string' || typeof data === 'number') {\n            value = text = data;\n            disabled = false;\n        } else if (typeof data === 'object' && data !== null &&\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\n        } else {\n            return null;\n        }\n        return new NgxSelectOption(value, text, disabled, data, parent);\n    }\n\n    //////////// interface ControlValueAccessor ////////////\n    public onChange = (v: any) => v;\n\n    public onTouched: () => void = () => null;\n\n    public writeValue(obj: any): void {\n        this.subjExternalValue.next(obj);\n    }\n\n    public registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n        this.subjRegisterOnChange.next();\n    }\n\n    public registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n"
  ],
  "names": [
    "NgxSelectOption",
    "_parent",
    "this",
    "value",
    "text",
    "disabled",
    "data",
    "type",
    "cacheRenderedText",
    "get",
    "prototype",
    "renderText",
    "sanitizer",
    "highlightText",
    "cacheHighlightText",
    "bypassSecurityTrustHtml",
    "replace",
    "RegExp",
    "escapeString",
    "NgxSelectOptGroup",
    "label",
    "options",
    "filter",
    "NgxSelectOptionDirective",
    "decorators",
    "ctorParameters",
    "TemplateRef",
    "NgxSelectOptionSelectedDirective",
    "template",
    "NgxSelectOptionNotFoundDirective",
    "ENavigation",
    "firstSelected",
    "firstIfOptionActiveInvisible",
    "NgxSelectComponent",
    "iterableDiffers",
    "cd",
    "defaultOptions",
    "cacheExternalValue",
    "_this",
    "optionValueField",
    "optionTextField",
    "optGroupLabelField",
    "optGroupOptionsField",
    "multiple",
    "allowClear",
    "placeholder",
    "noAutoComplete",
    "defaultValue",
    "autoSelectSingleOption",
    "autoClearSearch",
    "noResultsFound",
    "size",
    "keyCodeToRemoveSelected",
    "keyCodeToOptionsOpen",
    "keyCodeToOptionsClose",
    "keyCodeToOptionsSelect",
    "keyCodeToNavigateFirst",
    "keyCodeToNavigatePrevious",
    "keyCodeToNavigateNext",
    "keyCodeToNavigateLast",
    "typed",
    "EventEmitter",
    "focus",
    "blur",
    "open",
    "close",
    "select",
    "remove",
    "navigated",
    "selectionChanges",
    "optionsOpened",
    "actualValue",
    "subjOptions",
    "BehaviorSubject",
    "subjSearchText",
    "subjOptionsSelected",
    "subjDefaultValue",
    "subjRegisterOnChange",
    "Subject",
    "isFocused",
    "onChange",
    "v",
    "onTouched",
    "Object",
    "assign",
    "itemsDiffer",
    "find",
    "create",
    "defaultValueDiffer",
    "subscribe",
    "next",
    "emit",
    "subjActualValue",
    "subjExternalValue",
    "map",
    "concat",
    "merge",
    "o",
    "combineLatest",
    "eVal",
    "dVal",
    "newVal",
    "_",
    "isEqual",
    "length",
    "distinctUntilChanged",
    "x",
    "y",
    "share",
    "flatMap",
    "Observable",
    "from",
    "option",
    "of",
    "empty",
    "toArray",
    "optionsFlat",
    "indexOf",
    "selectedOptions",
    "search",
    "optionsFiltered",
    "filterOptions",
    "cacheOptionsFilteredFlat",
    "flatOptions",
    "useFormControl",
    "formControlExtraClasses",
    "defineProperty",
    "mainClicked",
    "event",
    "clickedSelectComponent",
    "optionsClose",
    "detectChanges",
    "optionsFilteredFlat",
    "do",
    "navigateOption",
    "navigation",
    "newActiveIdx",
    "index",
    "activeOption",
    "filteredOptionList",
    "first",
    "previous",
    "optionActive",
    "last",
    "idxOfOptionActive",
    "ngDoCheck",
    "diff",
    "items",
    "defVal",
    "_focusToInput",
    "checkInputVisibility",
    "inputElRef",
    "nativeElement",
    "document",
    "activeElement",
    "canClearNotMultiple",
    "focusToInput",
    "inputKeyDown",
    "keysForOpenedState",
    "keysForClosedState",
    "code",
    "preventDefault",
    "stopPropagation",
    "optionSelect",
    "trackByOption",
    "optionsOpen",
    "highlightOption",
    "optionActivate",
    "searchCallback",
    "regExp",
    "test",
    "filterOption",
    "subOp",
    "subOption",
    "ensureVisibleElement",
    "element",
    "choiceMenuElRef",
    "cacheElementOffsetTop",
    "offsetTop",
    "container",
    "scrollTop",
    "offsetHeight",
    "clientHeight",
    "buildOptions",
    "result",
    "optGroup_1",
    "item",
    "forEach",
    "option_1",
    "buildOption",
    "push",
    "parent",
    "propertyExists",
    "obj",
    "registerOnChange",
    "fn",
    "exports"
  ],
  "mappings": "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"
}
