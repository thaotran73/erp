{
  "version": 3,
  "file": "ngx-select-ex.umd.js",
  "sources": [
    "ng://ngx-select-ex/out/ngx-select/ngx-select.component.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-templates.directive.ts",
    "ng://ngx-select-ex/out/ngx-select/ngx-select.classes.ts"
  ],
  "sourcesContent": [
    "import {\n    AfterContentChecked, DoCheck, Input, Output, ViewChild,\n    Component, ElementRef, EventEmitter, forwardRef, HostListener, IterableDiffer, IterableDiffers, ChangeDetectorRef, ContentChild,\n    TemplateRef, Optional, Inject, InjectionToken\n} from '@angular/core';\nimport {ControlValueAccessor, NG_VALUE_ACCESSOR} from '@angular/forms';\nimport {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport {Subject} from 'rxjs/Subject';\nimport {Observable} from 'rxjs/Observable';\nimport {BehaviorSubject} from 'rxjs/BehaviorSubject';\nimport 'rxjs/add/observable/empty';\nimport 'rxjs/add/observable/from';\nimport 'rxjs/add/observable/of';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/combineLatest';\nimport 'rxjs/add/operator/mergeMap';\nimport 'rxjs/add/operator/toArray';\nimport 'rxjs/add/operator/filter';\nimport 'rxjs/add/operator/share';\nimport 'rxjs/add/operator/merge';\nimport 'rxjs/add/operator/map';\nimport 'rxjs/add/operator/do';\nimport * as lodashNs from 'lodash';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {NgxSelectOptGroup, NgxSelectOption, TSelectOption} from './ngx-select.classes';\nimport {NgxSelectOptionDirective, NgxSelectOptionNotFoundDirective, NgxSelectOptionSelectedDirective} from './ngx-templates.directive';\nimport {INgxOptionNavigated, INgxSelectOption, INgxSelectOptions} from './ngx-select.interfaces';\n\nconst _ = lodashNs;\nconst escapeString = escapeStringNs;\n\nexport const NGX_SELECT_OPTIONS = new InjectionToken<any>('NGX_SELECT_OPTIONS');\n\nexport interface INgxSelectComponentMouseEvent extends MouseEvent {\n    clickedSelectComponent?: NgxSelectComponent;\n}\n\nenum ENavigation {\n    first, previous, next, last,\n    firstSelected, firstIfOptionActiveInvisible\n}\n\nfunction propertyExists(obj: Object, propertyName: string) {\n    return propertyName in obj;\n}\n\n@Component({\n    selector: 'ngx-select',\n    template: `<div #main [tabindex]=\"disabled? -1: 0\" class=\"ngx-select dropdown\"\n     [ngClass]=\"setFormControlSize({\n        'ngx-select_multiple form-control': multiple === true,\n        'open show': optionsOpened && optionsFiltered.length\n     }, multiple === true)\"\n     (click)=\"mainClicked($event)\" (focusin)=\"mainClicked($event)\"\n     (focus)=\"focusToInput()\" (keydown)=\"inputKeyDown($event)\"\n     (keyup)=\"mainKeyUp($event)\">\n    <div [ngClass]=\"{ 'ngx-select__disabled': disabled}\"></div>\n\n    <!-- single selected item -->\n    <div class=\"ngx-select__selected\"\n         *ngIf=\"(multiple === false) && (!optionsOpened || noAutoComplete)\">\n        <div class=\"ngx-select__toggle btn form-control\" [ngClass]=\"setFormControlSize(setBtnSize())\"\n             (click)=\"optionsOpen()\">\n\n            <span *ngIf=\"!optionsSelected.length\" class=\"ngx-select__placeholder text-muted\">\n                <span [innerHtml]=\"placeholder\"></span>\n            </span>\n            <span *ngIf=\"optionsSelected.length\"\n                  class=\"ngx-select__selected-single pull-left float-left\"\n                  [ngClass]=\"{'ngx-select__allow-clear': allowClear}\">\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: optionsSelected[0], index: 0,\n                                                          text: sanitize(optionsSelected[0].text)}\">\n                </ng-container>\n            </span>\n            <span class=\"ngx-select__toggle-buttons\">\n                <a class=\"ngx-select__clear btn btn-sm btn-link\" *ngIf=\"canClearNotMultiple()\"\n                   [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(optionsSelected[0], $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n                <i class=\"dropdown-toggle\"></i>\n                <i class=\"ngx-select__toggle-caret caret\"></i>\n            </span>\n        </div>\n    </div>\n\n    <!-- multiple selected items -->\n    <div class=\"ngx-select__selected\" *ngIf=\"multiple === true\">\n        <span *ngFor=\"let option of optionsSelected; trackBy: trackByOption; let idx = index\">\n            <span tabindex=\"-1\" [ngClass]=\"setBtnSize()\"\n                  class=\"ngx-select__selected-plural btn btn-default btn-secondary btn-xs\">\n\n                <ng-container [ngTemplateOutlet]=\"templateSelectedOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, index: idx, text: sanitize(option.text)}\">\n                </ng-container>\n\n                <a class=\"ngx-select__clear btn btn-sm btn-link pull-right float-right\" [ngClass]=\"setBtnSize()\"\n                   (click)=\"optionRemove(option, $event)\">\n                    <i class=\"ngx-select__clear-icon\"></i>\n                </a>\n            </span>\n        </span>\n    </div>\n\n    <!-- live search an item from the list -->\n    <input #input type=\"text\" class=\"ngx-select__search form-control\" [ngClass]=\"setFormControlSize()\"\n           *ngIf=\"checkInputVisibility()\"\n           [tabindex]=\"multiple === false? -1: 0\"\n           (keydown)=\"inputKeyDown($event)\"\n           (keyup)=\"inputKeyUp(input.value)\"\n           (input)=\"doInputText(input.value)\"\n           [disabled]=\"disabled\"\n           [placeholder]=\"optionsSelected.length? '': placeholder\"\n           (click)=\"inputClick(input.value)\"\n           autocomplete=\"off\"\n           autocorrect=\"off\"\n           autocapitalize=\"off\"\n           spellcheck=\"false\"\n           role=\"combobox\">\n\n    <!-- options template -->\n    <ul #choiceMenu role=\"menu\" *ngIf=\"isFocused\" class=\"ngx-select__choices dropdown-menu\"\n        [class.show]=\"optionsOpened\">\n        <li class=\"ngx-select__item-group\" role=\"menuitem\"\n            *ngFor=\"let opt of optionsFiltered; trackBy: trackByOption; let idxGroup=index\">\n            <div class=\"divider dropdown-divider\" *ngIf=\"opt.type === 'optgroup' && (idxGroup > 0)\"></div>\n            <div class=\"dropdown-header\" *ngIf=\"opt.type === 'optgroup'\">{{opt.label}}</div>\n\n            <a href=\"#\" #choiceItem class=\"ngx-select__item dropdown-item\"\n               *ngFor=\"let option of (opt.optionsFiltered || [opt]); trackBy: trackByOption; let idxOption = index\"\n               [ngClass]=\"{\n                    'ngx-select__item_active active': isOptionActive(option, choiceItem),\n                    'ngx-select__item_disabled disabled': option.disabled\n               }\"\n               (mouseenter)=\"optionActivate({\n                    activeOption: option,\n                    filteredOptionList: optionsFiltered,\n                    index: optionsFiltered.indexOf(option)\n               })\"\n               (click)=\"optionSelect(option, $event)\">\n                <ng-container [ngTemplateOutlet]=\"templateOption || defaultTemplateOption\"\n                              [ngTemplateOutletContext]=\"{$implicit: option, text: highlightOption(option),\n                              index: idxGroup, subIndex: idxOption}\"></ng-container>\n            </a>\n        </li>\n        <li class=\"ngx-select__item ngx-select__item_no-found dropdown-header\" *ngIf=\"!optionsFiltered.length\">\n            <ng-container [ngTemplateOutlet]=\"templateOptionNotFound || defaultTemplateOptionNotFound\"></ng-container>\n        </li>\n    </ul>\n\n    <!--Default templates-->\n    <ng-template #defaultTemplateOption let-text=\"text\">\n        <span [innerHtml]=\"text\"></span>\n    </ng-template>\n\n    <ng-template #defaultTemplateOptionNotFound>\n        {{noResultsFound}}\n    </ng-template>\n\n</div>`,\n    styles: [`.ngx-select{ }\n  .ngx-select_multiple{\n    height:auto;\n    padding:3px 3px 0 3px; }\n  .ngx-select_multiple .ngx-select__search{\n    background-color:transparent !important;\n    border:none;\n    outline:none;\n    -webkit-box-shadow:none;\n            box-shadow:none;\n    height:1.6666em;\n    padding:0;\n    margin-bottom:3px; }\n  .ngx-select__disabled{\n    background-color:#eceeef;\n    border-radius:4px;\n    position:absolute;\n    width:100%;\n    height:100%;\n    z-index:5;\n    opacity:0.6;\n    top:0;\n    left:0;\n    cursor:not-allowed; }\n  .ngx-select__toggle{\n    outline:0;\n    position:relative;\n    text-align:left !important;\n    color:#333;\n    background-color:#fff;\n    border-color:#ccc;\n    display:-webkit-inline-box;\n    display:-ms-inline-flexbox;\n    display:inline-flex;\n    -webkit-box-align:stretch;\n        -ms-flex-align:stretch;\n            align-items:stretch;\n    -webkit-box-pack:justify;\n        -ms-flex-pack:justify;\n            justify-content:space-between; }\n    .ngx-select__toggle:hover{\n      color:#333;\n      background-color:#e6e6e6;\n      border-color:#adadad; }\n  .ngx-select__toggle-buttons{\n    -ms-flex-negative:0;\n        flex-shrink:0;\n    display:-webkit-box;\n    display:-ms-flexbox;\n    display:flex;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center; }\n  .ngx-select__toggle-caret{\n    position:absolute;\n    height:10px;\n    top:50%;\n    right:10px;\n    margin-top:-2px; }\n  .ngx-select__placeholder{\n    float:left; }\n  .ngx-select__clear{\n    margin-right:10px;\n    padding:0;\n    border:none; }\n  .ngx-select_multiple .ngx-select__clear{\n    line-height:initial;\n    margin-left:5px;\n    margin-right:0;\n    color:#000;\n    opacity:.5; }\n  .ngx-select__clear-icon{\n    display:inline-block;\n    font-size:inherit;\n    cursor:pointer;\n    position:relative;\n    width:1em;\n    height:.75em;\n    padding:0; }\n    .ngx-select__clear-icon:before, .ngx-select__clear-icon:after{\n      content:'';\n      position:absolute;\n      border-top:3px solid;\n      width:100%;\n      top:50%;\n      left:0;\n      margin-top:-1px; }\n    .ngx-select__clear-icon:before{\n      -webkit-transform:rotate(45deg);\n              transform:rotate(45deg); }\n    .ngx-select__clear-icon:after{\n      -webkit-transform:rotate(-45deg);\n              transform:rotate(-45deg); }\n  .ngx-select__choices{\n    width:100%;\n    height:auto;\n    max-height:200px;\n    overflow-x:hidden;\n    margin-top:0;\n    position:absolute; }\n  .ngx-select_multiple .ngx-select__choices{\n    margin-top:1px; }\n  .ngx-select__item{\n    display:block;\n    padding:3px 20px;\n    clear:both;\n    font-weight:400;\n    line-height:1.42857143;\n    white-space:nowrap;\n    cursor:pointer;\n    text-decoration:none; }\n  .ngx-select__item_disabled, .ngx-select__item_no-found{\n    cursor:default; }\n  .ngx-select__item_active{\n    color:#fff;\n    outline:0;\n    background-color:#428bca; }\n  .ngx-select__selected-single, .ngx-select__selected-plural{\n    display:-webkit-inline-box;\n    display:-ms-inline-flexbox;\n    display:inline-flex;\n    -webkit-box-align:center;\n        -ms-flex-align:center;\n            align-items:center;\n    overflow:hidden; }\n    .ngx-select__selected-single span, .ngx-select__selected-plural span{\n      overflow:hidden;\n      text-overflow:ellipsis; }\n  .ngx-select__selected-plural{\n    outline:0;\n    margin:0 3px 3px 0; }\n.input-group > .dropdown{\n  position:static; }\n`],\n    providers: [\n        {\n            provide: NG_VALUE_ACCESSOR,\n            useExisting: forwardRef(() => NgxSelectComponent),\n            multi: true\n        }\n    ]\n})\nexport class NgxSelectComponent implements INgxSelectOptions, ControlValueAccessor, DoCheck, AfterContentChecked {\n    @Input() public items: any[];\n    @Input() public optionValueField = 'id';\n    @Input() public optionTextField = 'text';\n    @Input() public optGroupLabelField = 'label';\n    @Input() public optGroupOptionsField = 'options';\n    @Input() public multiple = false;\n    @Input() public allowClear = false;\n    @Input() public placeholder = '';\n    @Input() public noAutoComplete = false;\n    @Input() public disabled = false;\n    @Input() public defaultValue: any[] = [];\n    @Input() public autoSelectSingleOption = false;\n    @Input() public autoClearSearch = false;\n    @Input() public noResultsFound = 'No results found';\n    @Input() public size: 'small' | 'default' | 'large' = 'default';\n    @Input() public searchCallback: (search: string, item: INgxSelectOption) => boolean;\n    public keyCodeToRemoveSelected = 'Delete';\n    public keyCodeToOptionsOpen = 'Enter';\n    public keyCodeToOptionsClose = 'Escape';\n    public keyCodeToOptionsSelect = 'Enter';\n    public keyCodeToNavigateFirst = 'ArrowLeft';\n    public keyCodeToNavigatePrevious = 'ArrowUp';\n    public keyCodeToNavigateNext = 'ArrowDown';\n    public keyCodeToNavigateLast = 'ArrowRight';\n\n    @Output() public typed = new EventEmitter<string>();\n    @Output() public focus = new EventEmitter<void>();\n    @Output() public blur = new EventEmitter<void>();\n    @Output() public open = new EventEmitter<void>();\n    @Output() public close = new EventEmitter<void>();\n    @Output() public select = new EventEmitter<any>();\n    @Output() public remove = new EventEmitter<any>();\n    @Output() public navigated = new EventEmitter<INgxOptionNavigated>();\n    @Output() public selectionChanges = new EventEmitter<INgxSelectOption[]>();\n\n    @ViewChild('main') protected mainElRef: ElementRef;\n    @ViewChild('input') protected inputElRef: ElementRef;\n    @ViewChild('choiceMenu') protected choiceMenuElRef: ElementRef;\n\n    @ContentChild(NgxSelectOptionDirective, {read: TemplateRef}) templateOption: NgxSelectOptionDirective;\n    @ContentChild(NgxSelectOptionSelectedDirective, {read: TemplateRef}) templateSelectedOption: NgxSelectOptionSelectedDirective;\n    @ContentChild(NgxSelectOptionNotFoundDirective, {read: TemplateRef}) templateOptionNotFound: NgxSelectOptionNotFoundDirective;\n\n    public optionsOpened = false;\n    public optionsFiltered: TSelectOption[];\n\n    private optionActive: NgxSelectOption;\n    private itemsDiffer: IterableDiffer<any>;\n    private defaultValueDiffer: IterableDiffer<any[]>;\n    private actualValue: any[] = [];\n\n    public subjOptions = new BehaviorSubject<TSelectOption[]>([]);\n    private subjSearchText = new BehaviorSubject<string>('');\n\n    private subjOptionsSelected = new BehaviorSubject<NgxSelectOption[]>([]);\n    private subjExternalValue = new BehaviorSubject<any[]>([]);\n    private subjDefaultValue = new BehaviorSubject<any[]>([]);\n    private subjRegisterOnChange = new Subject();\n\n    private cacheOptionsFilteredFlat: NgxSelectOption[];\n    private cacheElementOffsetTop: number;\n\n    private _focusToInput = false;\n    public isFocused = false;\n\n    constructor(iterableDiffers: IterableDiffers, private sanitizer: DomSanitizer, private cd: ChangeDetectorRef,\n                @Inject(NGX_SELECT_OPTIONS) @Optional() defaultOptions: INgxSelectOptions) {\n        Object.assign(this, defaultOptions);\n\n        // differs\n        this.itemsDiffer = iterableDiffers.find([]).create<any>(null);\n        this.defaultValueDiffer = iterableDiffers.find([]).create<any>(null);\n\n        // observers\n        this.typed.subscribe((text: string) => this.subjSearchText.next(text));\n        this.subjOptionsSelected.subscribe((options: NgxSelectOption[]) => this.selectionChanges.emit(options));\n        let cacheExternalValue: any[];\n        const subjActualValue = this.subjExternalValue\n            .map((v: any[]) => cacheExternalValue = v === null ? [] : [].concat(v))\n            .merge(this.subjOptionsSelected.map((options: NgxSelectOption[]) =>\n                options.map((o: NgxSelectOption) => o.value)\n            ))\n            .combineLatest(this.subjDefaultValue, (eVal: any[], dVal: any[]) => {\n                const newVal = _.isEqual(eVal, dVal) ? [] : eVal;\n                return newVal.length ? newVal : dVal;\n            })\n            .distinctUntilChanged((x, y) => _.isEqual(x, y))\n            .share();\n\n        subjActualValue\n            .combineLatest(this.subjRegisterOnChange, (actualValue: any[]) => actualValue)\n            .subscribe((actualValue: any[]) => {\n                this.actualValue = actualValue;\n                if (!_.isEqual(actualValue, cacheExternalValue)) {\n                    cacheExternalValue = actualValue;\n                    if (this.multiple) {\n                        this.onChange(actualValue);\n                    } else {\n                        this.onChange(actualValue.length ? actualValue[0] : null);\n                    }\n                }\n            });\n\n        this.subjOptions\n            .flatMap((options: TSelectOption[]) => Observable\n                .from(options)\n                .flatMap((option: TSelectOption) => option instanceof NgxSelectOption\n                    ? Observable.of(option)\n                    : (option instanceof NgxSelectOptGroup ? Observable.from(option.options) : Observable.empty())\n                )\n                .toArray()\n            )\n            .combineLatest(subjActualValue, (optionsFlat: NgxSelectOption[], actualValue: any[]) => {\n                Observable.from(optionsFlat)\n                    .filter((option: NgxSelectOption) => actualValue.indexOf(option.value) !== -1)\n                    .toArray()\n                    .filter((options: NgxSelectOption[]) => !_.isEqual(options, this.subjOptionsSelected.value))\n                    .subscribe((options: NgxSelectOption[]) => this.subjOptionsSelected.next(options));\n            })\n            .subscribe();\n\n        this.subjOptions\n            .combineLatest(this.subjOptionsSelected, this.subjSearchText,\n                (options: TSelectOption[], selectedOptions: NgxSelectOption[], search: string) => {\n                    this.optionsFiltered = this.filterOptions(search, options, selectedOptions);\n                    this.cacheOptionsFilteredFlat = null;\n                    this.navigateOption(ENavigation.firstIfOptionActiveInvisible);\n                    return selectedOptions;\n                }\n            )\n            .flatMap((selectedOptions: NgxSelectOption[]) => {\n                return this.optionsFilteredFlat().filter((flatOptions: NgxSelectOption[]) =>\n                    this.autoSelectSingleOption && flatOptions.length === 1 && !selectedOptions.length\n                );\n            })\n            .subscribe((flatOptions: NgxSelectOption[]) => this.subjOptionsSelected.next(flatOptions));\n    }\n\n    public setFormControlSize(otherClassNames: Object = {}, useFormControl: boolean = true) {\n        const formControlExtraClasses = useFormControl ? {\n            'form-control-sm input-sm': this.size === 'small',\n            'form-control-lg input-lg': this.size === 'large'\n        } : {};\n        return Object.assign(formControlExtraClasses, otherClassNames);\n    }\n\n    public setBtnSize() {\n        return {'btn-sm': this.size === 'small', 'btn-lg': this.size === 'large'};\n    }\n\n    public get optionsSelected(): NgxSelectOption[] {\n        return this.subjOptionsSelected.value;\n    }\n\n    public mainClicked(event: INgxSelectComponentMouseEvent) {\n        event.clickedSelectComponent = this;\n        if (!this.isFocused) {\n            this.isFocused = true;\n            this.focus.emit();\n        }\n    }\n\n    @HostListener('document:focusin', ['$event'])\n    @HostListener('document:click', ['$event'])\n    public documentClick(event: INgxSelectComponentMouseEvent) {\n        if (event.clickedSelectComponent !== this) {\n            if (this.optionsOpened) {\n                this.optionsClose();\n                this.cd.detectChanges(); // fix error because of delay between different events\n            }\n            if (this.isFocused) {\n                this.isFocused = false;\n                this.blur.emit();\n            }\n        }\n    }\n\n    private optionsFilteredFlat(): Observable<NgxSelectOption[]> {\n        if (this.cacheOptionsFilteredFlat) {\n            return Observable.of(this.cacheOptionsFilteredFlat);\n        }\n\n        return Observable.from(this.optionsFiltered)\n            .flatMap<TSelectOption, NgxSelectOption>((option: TSelectOption) =>\n                option instanceof NgxSelectOption ? Observable.of(option) :\n                    (option instanceof NgxSelectOptGroup ? Observable.from(option.optionsFiltered) : Observable.empty())\n            )\n            .filter((optionsFilteredFlat: NgxSelectOption) => !optionsFilteredFlat.disabled)\n            .toArray()\n            .do((optionsFilteredFlat: NgxSelectOption[]) => this.cacheOptionsFilteredFlat = optionsFilteredFlat);\n    }\n\n    private navigateOption(navigation: ENavigation) {\n        this.optionsFilteredFlat()\n            .map<NgxSelectOption[], INgxOptionNavigated>((options: NgxSelectOption[]) => {\n                const navigated: INgxOptionNavigated = {index: -1, activeOption: null, filteredOptionList: options};\n                let newActiveIdx;\n                switch (navigation) {\n                    case ENavigation.first:\n                        navigated.index = 0;\n                        break;\n                    case ENavigation.previous:\n                        newActiveIdx = options.indexOf(this.optionActive) - 1;\n                        navigated.index = newActiveIdx >= 0 ? newActiveIdx : options.length - 1;\n                        break;\n                    case ENavigation.next:\n                        newActiveIdx = options.indexOf(this.optionActive) + 1;\n                        navigated.index = newActiveIdx < options.length ? newActiveIdx : 0;\n                        break;\n                    case ENavigation.last:\n                        navigated.index = options.length - 1;\n                        break;\n                    case ENavigation.firstSelected:\n                        if (this.subjOptionsSelected.value.length) {\n                            navigated.index = options.indexOf(this.subjOptionsSelected.value[0]);\n                        }\n                        break;\n                    case ENavigation.firstIfOptionActiveInvisible:\n                        const idxOfOptionActive = options.indexOf(this.optionActive);\n                        navigated.index = idxOfOptionActive > 0 ? idxOfOptionActive : 0;\n                        break;\n                }\n                navigated.activeOption = options[navigated.index];\n                return navigated;\n            })\n            .subscribe((newNavigated: INgxOptionNavigated) => this.optionActivate(newNavigated));\n    }\n\n    public ngDoCheck(): void {\n        if (this.itemsDiffer.diff(this.items)) {\n            this.subjOptions.next(this.buildOptions(this.items));\n        }\n\n        const defVal = this.defaultValue ? [].concat(this.defaultValue) : [];\n        if (this.defaultValueDiffer.diff(defVal)) {\n            this.subjDefaultValue.next(defVal);\n        }\n    }\n\n    public ngAfterContentChecked(): void {\n        if (this._focusToInput && this.checkInputVisibility() && this.inputElRef &&\n            this.inputElRef.nativeElement !== document.activeElement) {\n            this._focusToInput = false;\n            this.inputElRef.nativeElement.focus();\n        }\n    }\n\n    public canClearNotMultiple(): boolean {\n        return this.allowClear && !!this.subjOptionsSelected.value.length &&\n            (!this.subjDefaultValue.value.length || this.subjDefaultValue.value[0] !== this.actualValue[0]);\n    }\n\n    public focusToInput(): void {\n        this._focusToInput = true;\n    }\n\n    public inputKeyDown(event: KeyboardEvent) {\n        const keysForOpenedState = [\n            this.keyCodeToOptionsSelect,\n            this.keyCodeToNavigateFirst,\n            this.keyCodeToNavigatePrevious,\n            this.keyCodeToNavigateNext,\n            this.keyCodeToNavigateLast,\n        ];\n        const keysForClosedState = [this.keyCodeToOptionsOpen, this.keyCodeToRemoveSelected];\n\n        if (this.optionsOpened && keysForOpenedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsSelect:\n                    this.optionSelect(this.optionActive);\n                    this.navigateOption(ENavigation.next);\n                    break;\n                case this.keyCodeToNavigateFirst:\n                    this.navigateOption(ENavigation.first);\n                    break;\n                case this.keyCodeToNavigatePrevious:\n                    this.navigateOption(ENavigation.previous);\n                    break;\n                case this.keyCodeToNavigateLast:\n                    this.navigateOption(ENavigation.last);\n                    break;\n                case this.keyCodeToNavigateNext:\n                    this.navigateOption(ENavigation.next);\n                    break;\n            }\n        } else if (!this.optionsOpened && keysForClosedState.indexOf(event.code) !== -1) {\n            event.preventDefault();\n            event.stopPropagation();\n            switch (event.code) {\n                case this.keyCodeToOptionsOpen:\n                    this.optionsOpen();\n                    break;\n                case this.keyCodeToRemoveSelected:\n                    this.optionRemove(this.subjOptionsSelected.value[this.subjOptionsSelected.value.length - 1], event);\n                    break;\n            }\n        }\n    }\n\n    public mainKeyUp(event: KeyboardEvent): void {\n        if (event.code === this.keyCodeToOptionsClose) {\n            this.optionsClose(/*true*/);\n        }\n    }\n\n    public trackByOption(index: number, option: TSelectOption) {\n        return option instanceof NgxSelectOption ? option.value :\n            (option instanceof NgxSelectOptGroup ? option.label : option);\n    }\n\n    public checkInputVisibility(): boolean {\n        return (this.multiple === true) || (this.optionsOpened && !this.noAutoComplete);\n    }\n\n    /** @internal */\n    public inputKeyUp(value: string = '') {\n        if (!this.optionsOpened && value) {\n            this.optionsOpen(value);\n        }\n    }\n\n    /** @internal */\n    public doInputText(value: string) {\n        if (this.optionsOpened) {\n            this.typed.emit(value);\n        }\n    }\n\n    /** @internal */\n    public inputClick(value: string = '') {\n        if (!this.optionsOpened) {\n            this.optionsOpen(value);\n        }\n    }\n\n    /** @internal */\n    public sanitize(html: string): SafeHtml {\n        return html ? this.sanitizer.bypassSecurityTrustHtml(html) : null;\n    }\n\n    /** @internal */\n    public highlightOption(option: NgxSelectOption): SafeHtml {\n        if (this.inputElRef) {\n            return option.renderText(this.sanitizer, this.inputElRef.nativeElement.value);\n        }\n        return option.renderText(this.sanitizer, '');\n    }\n\n    /** @internal */\n    public optionSelect(option: NgxSelectOption, event: Event = null): void {\n        if (event) {\n            event.preventDefault();\n            event.stopPropagation();\n        }\n        if (option && !option.disabled) {\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).concat([option]));\n            this.select.emit(option.value);\n            this.optionsClose(/*true*/);\n            this.onTouched();\n        }\n    }\n\n    /** @internal */\n    public optionRemove(option: NgxSelectOption, event: Event): void {\n        if (!this.disabled && option) {\n            event.stopPropagation();\n            this.subjOptionsSelected.next((this.multiple ? this.subjOptionsSelected.value : []).filter(o => o !== option));\n            this.remove.emit(option.value);\n        }\n    }\n\n    /** @internal */\n    public isOptionActive(option: NgxSelectOption, element: HTMLElement) {\n        if (this.optionActive === option) {\n            this.ensureVisibleElement(element);\n            return true;\n        }\n        return false;\n    }\n\n    /** @internal */\n    public optionActivate(navigated: INgxOptionNavigated): void {\n        if ((this.optionActive !== navigated.activeOption) &&\n            (!navigated.activeOption || !navigated.activeOption.disabled)) {\n            this.optionActive = navigated.activeOption;\n            this.navigated.emit(navigated);\n        }\n    }\n\n    private filterOptions(search: string, options: TSelectOption[], selectedOptions: NgxSelectOption[]): TSelectOption[] {\n        const regExp = new RegExp(escapeString(search), 'i'),\n            filterOption = (option: NgxSelectOption) => {\n                if (this.searchCallback) {\n                    return this.searchCallback(search, option);\n                }\n                return (!search || regExp.test(option.text)) && (!this.multiple || selectedOptions.indexOf(option) === -1);\n            };\n\n        return options.filter((option: TSelectOption) => {\n            if (option instanceof NgxSelectOption) {\n                return filterOption(<NgxSelectOption>option);\n            } else if (option instanceof NgxSelectOptGroup) {\n                const subOp = <NgxSelectOptGroup>option;\n                subOp.filter((subOption: NgxSelectOption) => filterOption(subOption));\n                return subOp.optionsFiltered.length;\n            }\n        });\n    }\n\n    private ensureVisibleElement(element: HTMLElement) {\n        if (this.choiceMenuElRef && this.cacheElementOffsetTop !== element.offsetTop) {\n            this.cacheElementOffsetTop = element.offsetTop;\n            const container: HTMLElement = this.choiceMenuElRef.nativeElement;\n            if (this.cacheElementOffsetTop < container.scrollTop) {\n                container.scrollTop = this.cacheElementOffsetTop;\n            } else if (this.cacheElementOffsetTop + element.offsetHeight > container.scrollTop + container.clientHeight) {\n                container.scrollTop = this.cacheElementOffsetTop + element.offsetHeight - container.clientHeight;\n            }\n        }\n    }\n\n    public optionsOpen(search: string = '') {\n        if (!this.disabled) {\n            this.optionsOpened = true;\n            this.subjSearchText.next(search);\n            if (!this.multiple && this.subjOptionsSelected.value.length) {\n                this.navigateOption(ENavigation.firstSelected);\n            } else {\n                this.navigateOption(ENavigation.first);\n            }\n            this.focusToInput();\n            this.open.emit();\n        }\n    }\n\n    public optionsClose(/*focusToHost: boolean = false*/) {\n        this.optionsOpened = false;\n        // if (focusToHost) {\n        //     const x = window.scrollX, y = window.scrollY;\n        //     this.mainElRef.nativeElement.focus();\n        //     window.scrollTo(x, y);\n        // }\n        this.close.emit();\n\n        if (this.autoClearSearch && this.multiple && this.inputElRef) {\n            this.inputElRef.nativeElement.value = null;\n        }\n    }\n\n    private buildOptions(data: any[]): Array<NgxSelectOption | NgxSelectOptGroup> {\n        const result: Array<NgxSelectOption | NgxSelectOptGroup> = [];\n        if (Array.isArray(data)) {\n            let option: NgxSelectOption;\n            data.forEach((item: any) => {\n                const isOptGroup = typeof item === 'object' && item !== null &&\n                    propertyExists(item, this.optGroupLabelField) && propertyExists(item, this.optGroupOptionsField) &&\n                    Array.isArray(item[this.optGroupOptionsField]);\n                if (isOptGroup) {\n                    const optGroup = new NgxSelectOptGroup(item[this.optGroupLabelField]);\n                    item[this.optGroupOptionsField].forEach((subOption: NgxSelectOption) => {\n                        if (option = this.buildOption(subOption, optGroup)) {\n                            optGroup.options.push(option);\n                        }\n                    });\n                    result.push(optGroup);\n                } else if (option = this.buildOption(item, null)) {\n                    result.push(option);\n                }\n            });\n        }\n        return result;\n    }\n\n    private buildOption(data: any, parent: NgxSelectOptGroup): NgxSelectOption {\n        let value, text, disabled;\n        if (typeof data === 'string' || typeof data === 'number') {\n            value = text = data;\n            disabled = false;\n        } else if (typeof data === 'object' && data !== null &&\n            (propertyExists(data, this.optionValueField) || propertyExists(data, this.optionTextField))) {\n            value = propertyExists(data, this.optionValueField) ? data[this.optionValueField] : data[this.optionTextField];\n            text = propertyExists(data, this.optionTextField) ? data[this.optionTextField] : data[this.optionValueField];\n            disabled = propertyExists(data, 'disabled') ? data['disabled'] : false;\n        } else {\n            return null;\n        }\n        return new NgxSelectOption(value, text, disabled, data, parent);\n    }\n\n    //////////// interface ControlValueAccessor ////////////\n    public onChange = (v: any) => v;\n\n    public onTouched: () => void = () => null;\n\n    public writeValue(obj: any): void {\n        this.subjExternalValue.next(obj);\n    }\n\n    public registerOnChange(fn: (_: any) => {}): void {\n        this.onChange = fn;\n        this.subjRegisterOnChange.next();\n    }\n\n    public registerOnTouched(fn: () => {}): void {\n        this.onTouched = fn;\n    }\n\n    public setDisabledState(isDisabled: boolean): void {\n        this.disabled = isDisabled;\n    }\n}\n",
    "import {Directive, TemplateRef} from '@angular/core';\n\n@Directive({selector: '[ngx-select-option]'})\nexport class NgxSelectOptionDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-selected]'})\nexport class NgxSelectOptionSelectedDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n\n@Directive({selector: '[ngx-select-option-not-found]'})\nexport class NgxSelectOptionNotFoundDirective {\n    constructor(public template: TemplateRef<any>) {\n    }\n}\n",
    "import {DomSanitizer, SafeHtml} from '@angular/platform-browser';\nimport * as escapeStringNs from 'escape-string-regexp';\nimport {INgxSelectOptGroup, INgxSelectOption, INgxSelectOptionBase, TNgxSelectOptionType} from './ngx-select.interfaces';\n\nconst escapeString = escapeStringNs;\n\nexport class NgxSelectOption implements INgxSelectOption, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'option';\n\n    constructor(public value: number | string,\n                public text: string,\n                public disabled: boolean,\n                public data: any,\n                private _parent: NgxSelectOptGroup = null) {\n    }\n\n    public get parent(): NgxSelectOptGroup {\n        return this._parent;\n    }\n\n    private cacheHighlightText: string;\n    private cacheRenderedText: SafeHtml = null;\n\n    public renderText(sanitizer: DomSanitizer, highlightText: string): SafeHtml {\n        if (this.cacheHighlightText !== highlightText || this.cacheRenderedText === null) {\n            this.cacheHighlightText = highlightText;\n            if (this.cacheHighlightText) {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml((this.text + '').replace(\n                    new RegExp(escapeString(this.cacheHighlightText), 'gi'), '<strong>$&</strong>'\n                ));\n            } else {\n                this.cacheRenderedText = sanitizer.bypassSecurityTrustHtml(this.text);\n            }\n        }\n        return this.cacheRenderedText;\n    }\n}\n\nexport class NgxSelectOptGroup implements INgxSelectOptGroup, INgxSelectOptionBase {\n    readonly type: TNgxSelectOptionType = 'optgroup';\n\n    public optionsFiltered: NgxSelectOption[];\n\n    constructor(public label: string,\n                public options: NgxSelectOption[] = []) {\n        this.filter(() => true);\n    }\n\n    public filter(callbackFn: (value: NgxSelectOption) => any): void {\n        this.optionsFiltered = this.options.filter((option: NgxSelectOption) => callbackFn(option));\n    }\n}\n\nexport type TSelectOption = NgxSelectOptGroup | NgxSelectOption;\n"
  ],
  "names": [
    "Observable",
    "Subject",
    "BehaviorSubject",
    "EventEmitter",
    "TemplateRef"
  ],
  "mappings": "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"
}
